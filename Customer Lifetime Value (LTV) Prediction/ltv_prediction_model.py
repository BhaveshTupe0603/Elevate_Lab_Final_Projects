# -*- coding: utf-8 -*-
"""LTV_prediction_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mPAf2HLmJlFM9ayMTXm5DnlwcJ2K53wJ
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load CSV
df = pd.read_csv("/content/drive/MyDrive/Dataset/online_retail_II.csv", encoding='ISO-8859-1')

# Drop rows with missing Customer ID
df = df.dropna(subset=['Customer ID'])

# Remove negative or cancelled transactions
df = df[(df['Quantity'] > 0) & (df['Price'] > 0)]

# Total Price per line item
df['TotalPrice'] = df['Quantity'] * df['Price']

# Convert date column
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# Use latest date to calculate recency
latest_date = df['InvoiceDate'].max()

# Group by Customer ID
customer_df = df.groupby('Customer ID').agg({
    'InvoiceDate': lambda x: (latest_date - x.max()).days,
    'Invoice': 'nunique',
    'TotalPrice': ['sum', 'mean']
})

customer_df.columns = ['recency', 'frequency', 'ltv', 'aov']
customer_df = customer_df.reset_index()

X = customer_df[['recency', 'frequency', 'aov']]
y = customer_df['ltv']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = XGBRegressor()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")

customer_df['predicted_ltv'] = model.predict(customer_df[['recency', 'frequency', 'aov']])
customer_df['segment'] = pd.qcut(customer_df['predicted_ltv'], q=4, labels=['Low', 'Mid', 'High', 'Very High'])

# LTV Distribution
sns.histplot(customer_df['predicted_ltv'], kde=True)
plt.title("Predicted LTV Distribution")
plt.xlabel("Predicted LTV")
plt.show()

# Boxplot by segment
sns.boxplot(x='segment', y='predicted_ltv', data=customer_df)
plt.title("LTV by Segment")
plt.show()

customer_df.to_csv("final_ltv_predictions.csv", index=False)