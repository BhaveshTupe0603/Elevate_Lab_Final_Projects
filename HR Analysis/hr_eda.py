# -*- coding: utf-8 -*-
"""HR .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_xrnuRBxC544yGfCKluvZWvt63wKE9ot
"""

# ✅ Import Required Libraries
import pandas as pd
import numpy as np

# ✅ Load Dataset
df = pd.read_csv("WA_Fn-UseC_-HR-Employee-Attrition.csv")

# ✅ Preview First 5 Rows
print(df.head())

# ✅ Basic Info
print("\nData Info:")
print(df.info())

# ✅ Check for Missing Values
print("\nMissing Values:")
print(df.isnull().sum())

# ✅ Summary Stats
print("\nSummary Statistics:")
print(df.describe())

# ✅ Check for Duplicates
print("\nDuplicate Rows:")
print(df.duplicated().sum())

# ✅ Drop duplicates if any
df = df.drop_duplicates()

# ✅ Drop columns that add no value (e.g., EmployeeCount, Over18, StandardHours)
df.drop(columns=['EmployeeCount', 'Over18', 'StandardHours', 'EmployeeNumber'], inplace=True)

# ✅ Convert categorical yes/no to binary
df['Attrition'] = df['Attrition'].map({'Yes': 1, 'No': 0})
df['OverTime'] = df['OverTime'].map({'Yes': 1, 'No': 0})

# ✅ Convert other object columns to category (optional but good for memory)
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].astype('category')

# ✅ Confirm shape and columns
print(f"\nCleaned Data Shape: {df.shape}")
print("\nColumns after cleaning:")
print(df.columns)

import seaborn as sns
import matplotlib.pyplot as plt

# Overall Attrition Count
sns.countplot(data=df, x='Attrition')
plt.title("Overall Attrition Count")
plt.xlabel("Attrition (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.show()

# Attrition Rate
attrition_rate = df['Attrition'].mean()
print(f"Overall Attrition Rate: {attrition_rate:.2%}")

# Countplot with Hue
sns.countplot(data=df, x='Department', hue='Attrition')
plt.title("Attrition by Department")
plt.xticks(rotation=45)
plt.ylabel("Employee Count")
plt.show()

sns.countplot(data=df, x='Gender', hue='Attrition')
plt.title("Attrition by Gender")
plt.ylabel("Count")
plt.show()

sns.countplot(data=df, x='OverTime', hue='Attrition')
plt.title("Attrition by Overtime Status")
plt.xticks([0, 1], ['No', 'Yes'])
plt.ylabel("Count")
plt.show()

# Create Age Bins
bins = [18, 25, 35, 45, 55, 65]
labels = ['18–25', '26–35', '36–45', '46–55', '56+']
df['AgeGroup'] = pd.cut(df['Age'], bins=bins, labels=labels)

# Plot
sns.countplot(data=df, x='AgeGroup', hue='Attrition')
plt.title("Attrition by Age Group")
plt.ylabel("Count")
plt.show()

# Select features for modeling
df_model = df.copy()

# Drop target leakage or unnecessary columns
df_model.drop(['AgeGroup'], axis=1, inplace=True)

# One-hot encode categorical variables
df_encoded = pd.get_dummies(df_model, drop_first=True)

# Confirm shape
print(f"Encoded dataset shape: {df_encoded.shape}")

from sklearn.model_selection import train_test_split

# Features and Target
X = df_encoded.drop('Attrition', axis=1)
y = df_encoded['Attrition']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Re-train model with scaled data
model = LogisticRegression(max_iter=2000, class_weight='balanced', random_state=42)
model.fit(X_train_scaled, y_train)

# Predict
y_pred = model.predict(X_test_scaled)


# Evaluate results
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print(f"\nAccuracy: {accuracy_score(y_test, y_pred):.2%}")

from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

# Predict probabilities
y_probs = model.predict_proba(X_test_scaled)[:, 1]

# ROC curve
fpr, tpr, thresholds = roc_curve(y_test, y_probs)
auc = roc_auc_score(y_test, y_probs)

# Plot ROC
plt.figure(figsize=(6, 4))
plt.plot(fpr, tpr, label=f"ROC Curve (AUC = {auc:.2f})", color='darkorange')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve - Attrition Prediction")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Save cleaned data (original structure)
df.to_csv("cleaned_hr_data.csv", index=False)
print("✅ Cleaned dataset exported as cleaned_hr_data.csv")